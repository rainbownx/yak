#!/bin/bash

AUR_URL="https://aur.archlinux.org"
BUILD_DIR="$HOME/build_dir"
mkdir -p "$BUILD_DIR"

# Colors
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
RESET='\033[0m'

print_info() {
  echo -e "${BLUE}[INFO]${RESET} $1"
}

print_warn() {
  echo -e "${YELLOW}[WARN]${RESET} $1"
}

show_version() {
  echo "yak 1.0.0"
}

usage() {
  cat <<EOF
Usage: yak [options] [packages...]

Options:
  -S         Install packages from repos or AUR
  -Rns       Remove packages with dependencies
  -Sy        Sync package databases
  -Syu       Full system upgrade including AUR packages
  -Ss        Search packages
  -V         Show yak version
  -h         Show this help message

Examples:
  yak -S package_name
  yak -Syu
  yak -Rns package_name
EOF
}

install_packages() {
  for pkg in "$@"; do
    if pacman -Qi "$pkg" &>/dev/null; then
      print_info "$pkg is already installed. Skipping."
    else
      print_info "Installing $pkg..."
      if ! yay -S --noconfirm "$pkg"; then
        print_warn "Failed to install $pkg"
      fi
    fi
  done
}

remove_packages() {
  for pkg in "$@"; do
    print_info "Removing $pkg..."
    sudo pacman -Rns --noconfirm "$pkg"
  done
}

search_packages() {
  yay -Ss "$@"
}

get_installed_version() {
  pacman -Qi "$1" 2>/dev/null | awk -F: '/Version/ {gsub(/ /,"",$2); print $2}'
}

get_aur_version() {
  curl -s "${AUR_URL}/rpc/?v=5&type=info&arg[]=$1" |
    jq -r '.results[0].Version // empty'
}

full_upgrade() {
  print_info "Updating system packages (Pacman)..."
  sudo pacman -Syu

  print_info "Checking AUR packages for updates..."
  mapfile -t aur_packages < <(pacman -Qqm)

  to_upgrade=()
  for pkg in "${aur_packages[@]}"; do
    local_ver=$(get_installed_version "$pkg")
    aur_ver=$(get_aur_version "$pkg")

    if [[ -z "$aur_ver" ]]; then
      print_warn "Failed to fetch version for $pkg, skipping."
      continue
    fi

    if [[ "$local_ver" != "$aur_ver" ]]; then
      print_info "Update available for $pkg ($local_ver -> $aur_ver)"
      to_upgrade+=("$pkg")
    fi
  done

  if [[ ${#to_upgrade[@]} -eq 0 ]]; then
    print_info "No AUR updates found."
  else
    print_info "Upgrading AUR packages: ${to_upgrade[*]}"
    yay -S --noconfirm "${to_upgrade[@]}"
  fi

  print_info "Full system upgrade complete."
}

main() {
  if [[ $# -eq 0 ]]; then
    usage
    exit 0
  fi

  case "$1" in
    -S)
      shift
      install_packages "$@"
      ;;
    -Rns)
      shift
      remove_packages "$@"
      ;;
    -Sy)
      print_info "Syncing package databases..."
      sudo pacman -Sy
      ;;
    -Syu)
      full_upgrade
      ;;
    -Ss)
      shift
      search_packages "$@"
      ;;
    -V)
      show_version
      ;;
    -h)
      usage
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
}

main "$@"
